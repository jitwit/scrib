
(define (pretty-board-state board*)
  (display-fragments
   (map (lambda (c.id)
          (case (cdr c.id)
            ((A) `(,@(huge-card (car c.id))
                   ,(make-string 7 #\space)))
            ((B) `(,(make-string 7 #\space)
                   ,@(huge-card (car c.id))))))
        board*))
  (newline))

;;; progress bar when comparing agents
(define (display-progress-bar A B N)
  (let ((progress (ceiling (* 100 (/ (+ A B) N))))
        (bar-A (round (/ (* 100 A) N)))
        (bar-B (round (/ (* 100 B) N))))
    (display #\[)
    (display-with-foreground 'light-green (make-string bar-A #\~))
    (display-with-foreground 'light-red (make-string (- 100 bar-A bar-B) #\?))    
    (display-with-foreground 'light-cyan (make-string bar-B #\~))
    (display-ln #\])))

(define (simple-progress-bar name i N)
  (let ((progress (round (/ (* 100 i) N)))
        (progress-i-1 (round (/ (* 100 (1- i)) N))))
    (when (< progress-i-1 progress)
      (display-with-foreground 'light-cyan name) (newline)
      (display #\[)
      (display-with-foreground 'light-green (make-string progress #\~))
      (display-with-foreground 'light-red (make-string (- 100 progress) #\.))
      (display-ln #\]))))

;;; render board for terminal
(define (display-cribbage-state player state phase)
  (let ((status (case (crib-dealer state)
                  ((A) 'pone)
                  ((B) 'deal))))
    (for-all (lambda (n) (newline)) (iota 30))
    (case phase
      ((discard)
       (format #t "~a~%~a ~a~%" status (crib-scoreB state) (crib-scoreA state))
       (newline)
       (display-huge-hand (crib-handB state))
       (newline))
      ((peg)
       (pretty-board-state (crib-board* state))
       (format #t "~a~%~a ~a~%" status (crib-scoreB state) (crib-scoreA state))
       (display-huge-hand (list (crib-cut state)))
       (display-huge-hand (crib-board state))
       (format #t "~%board count ~a~%" (crib-board-total (crib-board state)))
       (display-huge-hand (crib-handB state)))
      ((count)
       (let ((cut-card (crib-cut state))
             (handA (board*->hand state 'A))
             (handB (board*->hand state 'B))
             (crib (crib-crib state)))
         (let ((ordered-hands (if (eq? player (crib-dealer state))
                                  (list handA handB)
                                  (list handB handA))))
           (pretty-board-state (crib-board* state))
           (display-huge-hand (list cut-card))
           (for-all (lambda (hand)
                      (newline)
                      (display-huge-hand hand)
                      (format #t "scores ~a~%~%"
                              (score-hand (cons cut-card hand))))
                    ordered-hands)
           (newline)
           (display-huge-hand crib)
           (format #t "scores ~a~%~%" (score-crib (cons cut-card crib)))
           (format #t "~%B.C. ~a ~a~%" (crib-scoreB state) (crib-scoreA state))
           (format #t "Enter anything to continue~%")
           (read))))
      ((won)
       (format #t "Game over! ~a ~a~%" (crib-scoreB state) (crib-scoreA state))))))

(define (lerp lo hi vlo vhi x)
  (+ vlo
     (* (- vhi vlo)
        (/ (- x lo)
           (- hi lo)))))

(define (colorize-win-probability P)
  (format "background-color: hsl(~a,~a%,~a%);"
          (if (<= 1/2 P) 136 0)
          100
          ;;          (flonum->fixnum (+ 50.0 (floor (* 100 (abs (- P 1/2))))))
          (flonum->fixnum (+ 0.0 (floor (* 100.0 (- 1/2 (abs (- P 1/2)))))))))

(define (render-table file)
  (let ((target (string-append file ".html")))
    (delete-file target)
    (with-output-to-file target
      (lambda ()
        (send-reply (sxml->html
                     (matrix->sxml (with-input-from-file file read)
                                   (lambda (x)
                                     (let ((val (format "~,2f" x))
                                           (clr (colorize-win-probability x)))
                                       `(td (@ (style ,clr))
                                            ,val))))))))
    (case (machine-type)
      ((ta6le) (system (format "xdg-open ~a" target)))
      ((ta6osx) (system (format "open ~a" target))))))

(define (matrix->sxml M render)
  `(table (caption "Matrix")
          (tr (td "-/-")
              ,@(map (lambda (j)
                       `(td ,(number->string j)))
                     (iota (col-dim M))))
          ,@(map (lambda (i row)
                   `(tr (td ,(number->string i))
                        ,@(map (lambda (x)
                                 (render x))
                               (vector->list row))))
                 (iota (row-dim M))
                 (vector->list M))))
