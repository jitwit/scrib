
;;; Turns

;;; Run moves
;;; Game Phase predicates

(define (run-agents state A B)
  (let* ((now (current-time))
         (end #f)
         (out (open-output-file (format "games/~a-~a-~a-~a"
                                        (cribbot-identity A)
                                        (cribbot-identity B)
                                        (time-second now)
                                        (time-nanosecond now))))
         (agent-A (cribbot-strategy A))
         (agent-B (cribbot-strategy B)))
    (let loop ((state state))
      (write (crib->sexp state) out) (newline out)
      (let ((turn (crib-turn state)))
        (case (game-phase state)
          ((discard)
           (if (eq? turn 'A)
               (loop (run-cribbage state (agent-A (crib->discard state))))
               (loop (run-cribbage state (agent-B (crib->discard state))))))
          ((peg)
           (if (eq? turn 'A)
               (loop (run-cribbage state (agent-A (crib->peg state))))
               (loop (run-cribbage state (agent-B (crib->peg state))))))
          ((count) (loop (execute-count state)))
          ((won) (set! end state)))))
    (close-output-port out)
    end))

(define (compare-agents A B trials)
  (let ((wins-a 0)
        (wins-b 0)
        (N trials))
    (do ((trials trials (1- trials)))
        ((zero? trials)
         (format #t "~a won ~,2f% over ~a~%" (cribbot-identity A) (/ wins-a N 1/100) (cribbot-identity B)))
      (let ((result (time (run-agents (deal-crib 0 0 (random-dealer))
                                      A
                                      B))))
        (if (eq? (crib-scoreA result) 121)
            (inc! wins-a)
            (inc! wins-b))
        (format #t "~a v ~a~%" (cribbot-identity A) (cribbot-identity B))
        (format #t "~a - ~a out of ~a~%" wins-a wins-b N)
        (display-progress-bar wins-a wins-b N)))))

;;; terminal game 
(define (run-game machine)
  (let* ((now (current-time))
         (end #f)
         (out (open-output-file (format "games/~a-~a-~a-~a"
                                        (cribbot-identity machine)
                                        (cribbot-identity Jitwit)
                                        (time-second now)
                                        (time-nanosecond now))))
         (machine (cribbot-strategy machine))
         (jitwit-id 'B)
         (jitwit (cribbot-strategy Jitwit)))
    (let loop ((state (deal-crib 0 0 (random-dealer))))
      (write (crib->sexp state) out) (newline out)
      (let ((turn (crib-turn state)))
        (case (game-phase state)
          ((discard)
           (cond ((eq? turn 'A)
                  (loop (run-cribbage state (machine (crib->discard state)))))
                 (else
                  (display-cribbage-state jitwit-id state 'discard)
                  (loop (run-cribbage state (jitwit (crib->discard state)))))))
          ((peg)
           (cond ((eq? turn 'A)
                  (loop (run-cribbage state (machine (crib->peg state)))))
                 (else
                  (display-cribbage-state jitwit-id state 'peg)                  
                  (loop (run-cribbage state (jitwit (crib->peg state)))))))
          ((count)
           (display-cribbage-state jitwit-id state 'count)
           (loop (execute-count state)))
          ((won)
           (display-cribbage-state jitwit-id state 'won)
           (set! end state)))))
    (close-output-port out)
    end))
